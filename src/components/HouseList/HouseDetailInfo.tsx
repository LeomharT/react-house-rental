import { DollarCircleOutlined, HeartFilled, HeartOutlined, LeftOutlined, LinkOutlined, PhoneOutlined, QuestionOutlined, WechatOutlined } from '@ant-design/icons';
import { Affix, Anchor, Avatar, Badge, Button, Carousel, Divider, message, Popover, Rate, Spin, Tag } from 'antd';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import moment from 'moment';
import React, { Component, createRef } from 'react';
import { RouteComponentProps, withRouter } from 'react-router';
import mapMarker from '../../assets/img/mapMarker.png';
import mustlook from '../../assets/img/mustlook.png';
import { HouseCarousel, HouseInfo } from '../../interfaces/HouseListInterface';
import AuthStore from '../../redux/AuthStore';
import UserStore from '../../redux/UserStore';
import { VerifyIcon } from '../Common/AppIconTitle';
import { CONST_HOST, LANGUAGE_REFER } from '../Common/VariableGlobal';
import { RenderTags } from './HouseItem';

interface DetailProps extends RouteComponentProps
{

}
const { Link } = Anchor;
@observer
class HouseDetail extends Component<DetailProps, {}>
{
    AuthStore: AuthStore = AuthStore.GetInstance();
    UserStore: UserStore = UserStore.GetInstance();
    @observable houseDetailInfo: HouseInfo;
    tMapRef = createRef<HTMLDivElement>();
    @observable ok: boolean = false;
    InitCarouseList = async (): Promise<HouseInfo> =>
    {
        return (
            await (
                await
                    fetch(`http://localhost:3065/GetHouseDetailInfo?hId=${(this.props.match.params as any).HouseId}`)
            ).json()
        );
    };
    InitMap = () =>
    {
        const { houseDetailInfo } = this;
        const map = new TMap.Map(this.tMapRef.current, {
            center: new TMap.LatLng(
                parseFloat(houseDetailInfo.detailInfo.hLatitude),
                parseFloat(houseDetailInfo.detailInfo.hLongitude)),
            zoom: 18,
            pitch: 43.5,
            rotation: 45,
            viewMode: "2D"
        });
        new TMap.MultiMarker({
            map: map,
            style: {
                markerStyle: new TMap.MarkerStyle({
                    width: 25,
                    height: 35,
                    src: mapMarker,
                    anchor: { x: 16, y: 32 }
                })
            },
            geometries: [{
                id: "1",
                styled: "markerStyle",
                position: new TMap.LatLng(
                    parseFloat(houseDetailInfo.detailInfo.hLatitude),
                    parseFloat(houseDetailInfo.detailInfo.hLongitude)),
                properties: {
                    title: "position01"
                }
            }]
        });
    };
    async componentDidMount()
    {
        this.houseDetailInfo = await this.InitCarouseList();
        this.InitMap();
    }
    render()
    {
        const { history } = this.props;
        const { houseDetailInfo, ok, UserStore, AuthStore } = this;
        if (!houseDetailInfo) return (<Spin size='large' style={{ position: "absolute", top: '40%', left: '50%', marginLeft: "-20px" }} />);
        return (
            <div className='HouseDetailInfo'>
                <div className="CarouselAndBaseInfo" id="CarouselAndBaseInfo">
                    <div className="HCarousel">
                        <div >
                            <div className="HTitle">
                                <Button
                                    type='link'
                                    icon={<LeftOutlined />}
                                    onClick={() =>
                                    {
                                        history.push("/HouseList/Exhibits");
                                    }}
                                />
                                {houseDetailInfo.baseInfo.hTitle}
                                {RenderTags(houseDetailInfo.baseInfo.hTags.split(","))}
                                {houseDetailInfo.baseInfo.isVRed && <Button
                                    icon={<LinkOutlined />}
                                    onClick={() =>
                                    {
                                        window.open("/VRScene");
                                    }}
                                />}

                            </div>
                            <div className="HSubTitle">
                                <span>
                                    Áª¥Êä§Êó∂Èó¥:{moment(houseDetailInfo.detailInfo.Maintain).format("YYYY-MM-DD")}
                                </span>
                                <span>
                                    <VerifyIcon />&nbsp;&nbsp;ÊàøÂ±ãID:{houseDetailInfo.baseInfo.hId}
                                </span>
                            </div>
                        </div>
                        <Carousel autoplay>
                            {houseDetailInfo.carousel.map((c: HouseCarousel) =>
                            {
                                return (
                                    <img key={c.id} alt={c.id} src={c.url} />
                                );
                            })}
                        </Carousel>
                    </div>
                    <div className="HBaseInfo">
                        <div className='HRentAndFeature'>
                            <div className="RentAndCollect">
                                <div>
                                    <span>&yen;{houseDetailInfo.baseInfo.hRent}</span>&nbsp;ÂÖÉ/Êúà (Êúà‰ªò‰ª∑)
                                </div>
                                <div
                                    onClick={() =>
                                    {
                                        this.ok = !this.ok;
                                        if (!ok) { message.success("ok"); return; }
                                        message.error("nook");
                                    }}>
                                    {ok && <HeartFilled />}
                                    {!ok && <HeartOutlined />}
                                    ÂÖ≥Ê≥®
                                </div>

                            </div>
                            <img style={{ width: "62px", height: "23px", marginRight: "5px" }} alt="mustLookLook" src={mustlook} />
                            {houseDetailInfo.baseInfo.hFeature.split(',').map(f =>
                            {
                                return (
                                    <Tag key={f} color='default' style={{ height: "30px", lineHeight: "30px" }}>{f}</Tag>
                                );
                            })}
                        </div>
                        <div className="BaseInfoEtc">
                            <div>
                                <div>
                                    ÁßüËµÅÊñπÂºèÔºö{houseDetailInfo.baseInfo.hMethod}
                                </div>
                                <div>
                                    ÊàøÂ±ãÁ±ªÂûãÔºö{houseDetailInfo.baseInfo.hLayout + ' ' + houseDetailInfo.detailInfo.Area}
                                </div>
                                <div>
                                    ÊúùÂêëÊ•ºÂ±ÇÔºö{houseDetailInfo.baseInfo.hTowards}
                                </div>
                                <div>
                                    È£éÈô©ÊèêÁ§∫Ôºö<Button style={{ padding: "0" }} type="link" href="https://m.ke.com/text/disclaimer">Áî®Êà∑È£éÈô©ÊèêÁ§∫</Button>
                                </div>
                            </div>
                            <div>
                                <Rate
                                    allowClear
                                    defaultValue={4}
                                    character="Â•Ω"
                                    style={{ color: "#EF615A" }}
                                />
                            </div>
                        </div>
                        <div className="ContactOnlineOrPhone">
                            <div className="LandLordInfo">
                                <Avatar shape="square" size={64} src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
                                ËøôËæπÂ∫îËØ•ÊîæÊàø‰∏úÁöÑ‰ø°ÊÅØÁöÑÂìé‰ΩÜÊòØÂÅö‰∏çÂÅöÂë¢giao
                            </div>
                            <div>
                                <Button
                                    size="large"
                                    icon={<DollarCircleOutlined />}
                                    type="primary"
                                    onClick={() =>
                                    {
                                        if (UserStore.authInfo.session == null)
                                        {
                                            AuthStore.auth.login();
                                            return;
                                        }
                                        message.success("ÁßüÁöÑÂ•ΩüëåüòÑ");
                                    }}
                                >Á´ãÂç≥ÁßüËµÅ</Button>
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <Popover
                                    placement="bottom"
                                    trigger='click'
                                    content={(): React.ReactNode =>
                                    {
                                        let visualPhoneNumber = '400';
                                        for (let i = 0; i < 10; i++)
                                        {
                                            visualPhoneNumber += Math.round(Math.random() * 10);
                                        }
                                        return (
                                            <div style={{ padding: "5px" }}>
                                                {visualPhoneNumber}
                                            </div>
                                        );
                                    }}
                                ><Button size="large" icon={<PhoneOutlined />}>ÁîµËØùËÅîÁ≥ª</Button>
                                </Popover>
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <Button
                                    size="large"
                                    icon={<WechatOutlined />}
                                    type="primary"
                                    onClick={() =>
                                    {
                                        if (UserStore.authInfo.session == null)
                                        {
                                            AuthStore.auth.login();
                                            return;
                                        }
                                        message.success("ËÅîÁ≥ªÊàëÂì¶Á≠â‰∏ãËøòÊ≤°ÂÅöÂá∫Êù•üëà");
                                    }}
                                >Âú®Á∫øËÅîÁ≥ª</Button>
                            </div>
                        </div>
                    </div>
                </div>
                <Affix offsetTop={0}>
                    <div className="TargetBox">
                        <Anchor affix={false}>
                            <Link title="Âü∫Êú¨‰ø°ÊÅØ" href="#CarouselAndBaseInfo" />
                            <Link title="ÊàøÂ±ã‰ø°ÊÅØ" href="#HDetailInfo" />
                            <Link title="ÈÖçÂ•óËÆæÊñΩ" href="#HFacilities" />
                            <Link title="ÊàøÂ±ãÊèèËø∞" href="#Hdescription" />
                            <Link title="Ë¥πÁî®ËØ¶ÊÉÖ" href="#HRent" />
                            <Link title="ÊàøÂ±ã‰ΩçÁΩÆ" href="#HPositionMap"></Link>
                        </Anchor>
                    </div>
                </Affix>
                <Divider orientation="left" className="DividerHouseInfo">ÊàøÂ±ã‰ø°ÊÅØ</Divider>
                <div className='HDetailInfo' id='HDetailInfo'>
                    <span className='SpanTitle'>
                        Âü∫Êú¨‰ø°ÊÅØ
                    </span>
                    <ul className='InfoLists'>
                        <li>Èù¢ÁßØÔºö{houseDetailInfo.detailInfo.Area}</li>
                        <li>Áª¥Êä§Ôºö{moment(houseDetailInfo.detailInfo.Maintain).format("YYYY-MM-DD")}</li>
                        <li>Ê•ºÂ±ÇÔºö{houseDetailInfo.baseInfo.hFloor}</li>
                        <li>ËΩ¶‰ΩçÔºö{houseDetailInfo.detailInfo.Parking}</li>
                        <li>Áî®ÁîµÔºö{houseDetailInfo.detailInfo.Electricity}</li>
                        <li>ÈááÊöñÔºö{houseDetailInfo.detailInfo.Warm}</li>
                        <li>ÁßüÊúüÔºöÈöèÊó∂ÁßüÈÄÄ</li>
                        <li>ÊúùÂêëÔºö{houseDetailInfo.baseInfo.hTowards}</li>
                        <li>ÂÖ•‰ΩèÔºöÈöèÊó∂ÂÖ•‰Ωè</li>
                        <li>ÁúãÊàøÔºöÈöèÊó∂ÁúãÊàø  VRÁúãÊàø</li>
                        <li>ÁîµÊ¢ØÔºö{houseDetailInfo.baseInfo.hElevator}</li>
                        <li>Áî®Ê∞¥Ôºö{houseDetailInfo.detailInfo.Water}</li>
                        <li>ÁáÉÊ∞îÔºö{houseDetailInfo.detailInfo.isGas ? "Êúâ" : "Êó†"}</li>
                    </ul>
                </div>
                <Divider />
                <div className="HFacilities" id='HFacilities'>
                    <span className='SpanTitle'>
                        ÈÖçÂ•óËÆæÊñΩ
                    </span>
                    <ul>
                        {Object.keys(houseDetailInfo.detailInfo).map((key: string): React.ReactNode =>
                        {
                            if (!key.includes('is')) return null;
                            return (
                                <li key={key}>
                                    {houseDetailInfo.detailInfo[key]
                                        ? <img alt='facilities' src={`${CONST_HOST}/img/HInfoIcons/${key.substr(2)}Icon.jpg`} />
                                        : <img alt='facilities' src={`${CONST_HOST}/img/HInfoIcons/${key.substr(2)}IconNone.jpg`} />}
                                    <p style={{ textDecoration: !houseDetailInfo.detailInfo[key] ? "line-through" : "none" }}>{
                                        //@ts-ignore
                                        LANGUAGE_REFER[key.substr(2)]}
                                    </p>
                                </li>
                            );
                        })}
                    </ul>
                </div>
                <Divider orientation="left" className="DividerHouseInfo">ÊàøÊ∫êÊèèËø∞</Divider>
                <div className="Hdescription" id='Hdescription'>
                    <span className='SpanTitle'>
                        ÊàøÂ±ãÊèèËø∞
                    </span>
                    <ul>
                        {houseDetailInfo.carousel.map((c: HouseCarousel) =>
                        {
                            return (
                                <li key={c.id}>
                                    <img draggable='false' alt="picdes" src={c.url} />
                                </li>
                            );
                        })}
                    </ul>
                </div>
                <Divider />
                <div className="HRent" id='HRent'>
                    <span className='SpanTitle'>
                        Ë¥πÁî®ËØ¶ÊÉÖ
                    </span>
                    <ul>
                        <li>
                            ‰ªòÊ¨æÊñπÂºè
                            <span>Êúà‰ªò</span>
                        </li>
                        <li>
                            ÁßüÈáëÔºàÂÖÉ/ÊúàÔºâ
                            <span style={{ color: "#fe615a" }}>{houseDetailInfo.baseInfo.hRent}</span>
                        </li>
                        <li>
                            <Popover
                                content={<div>
                                    ÊúçÂä°Ë¥πÂåÖÊã¨ÔºöÁâ©‰∏öË¥πÔºåÂÆΩÂ∏¶Ë¥πÔºåÂûÉÂúæË¥πÔºåÂÆ∂ÁîµÁª¥‰øÆË¥π
                                </div>
                                }>
                                <Badge
                                    count={<QuestionOutlined />}
                                    style={{
                                        fontSize: "12px",
                                        position: "absolute",
                                        cursor: "pointer",
                                    }} />
                            </Popover>
                            ÊúçÂä°Ë¥πÔºàÂÖÉÔºâ
                            <span>{parseInt(houseDetailInfo.baseInfo.hRent) * 0.05}</span>
                        </li>
                        <li>
                            ÁîµË¥πÔºàÂÖÉÔºâ
                            <span>0.5 ÂÖÉ/Â∫¶</span>
                        </li>
                        <li>
                            Ê∞¥Ë¥πÔºàÂÖÉÔºâ
                            <span>1 ÂÖÉ/Âê®</span>
                        </li>
                    </ul>
                </div>
                <Divider orientation="left" className="DividerHouseInfo">‰ΩçÁΩÆÂíåÂú∞ÁÇπ</Divider>
                <div className="HPositionMap" id="HPositionMap" ref={this.tMapRef} />
            </div>
        );
    }
}



export default withRouter(HouseDetail);
